.. _cookbook:

Cookbook
--------

.. _progmem:

Use PROGMEM for graphics data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

As explained on this page, http://www.arduino.cc/playground/Learning/Memory
there are two types of memory in the Arduino: Flash and SRAM.  Flash
is relatively plentiful, so it is much better to put graphics data
into the Arduino's Flash.  To do this, use the PROGMEM keyword.
Here is a sprite image that uses the PROGMEM modifier to force the
data into Flash::

  PROGMEM prog_uchar image4[] = {
  0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0x0f,
  0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0x28,
  0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0x2d,
  0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0x60, 0x00, 0x00, 0x8b, 0xe1, 0xe1, 0xe1, 0xe1, 0xbe,
  0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xb6, 0x00, 0x00, 0x00, 0xb6, 0xe1, 0xe1, 0xe1, 0xe1, 0xc3,
  0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0x35, 0x0b, 0x00, 0x00, 0x8b, 0xe1, 0xe1, 0xe1, 0xe1, 0xdc,
  0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0x8b, 0x00, 0x8b, 0x00, 0x00, 0xb6, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1,
  0xe1, 0xe1, 0xe1, 0xe1, 0xbd, 0x00, 0x60, 0xe1, 0x00, 0x00, 0x8b, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1,
  0xe1, 0xe1, 0xe1, 0xe1, 0x60, 0x00, 0xb6, 0xe1, 0x00, 0x00, 0xb6, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1,
  0xe1, 0xe1, 0xe1, 0x8b, 0x00, 0x8b, 0xe1, 0xe1, 0x00, 0x00, 0x8b, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1,
  0xe1, 0xe1, 0xe1, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0xe1, 0xe1, 0xe1, 0xe1,
  0xe1, 0xe1, 0xe1, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xe1, 0xe1, 0xe1, 0xe1,
  0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0x00, 0x00, 0x8b, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1,
  0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0x00, 0x00, 0xaf, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1,
  0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0x00, 0x00, 0x92, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1,
  0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1,
  };

Fade to black
^^^^^^^^^^^^^

To fade the background graphics to black, you can loop over the
character's colors, decrementing R,G,B until they reach zero.  Spread
over a second or so (the outer loop below), this produces a nice
fade-to-black effect.

.. literalinclude:: ../files/gameduino/synth/sketches/asteroids.pder
  :language: c++
  :start-after: JCB-FADE-A
  :end-before: JCB-FADE-B

.. _doublebuffer:

Smooth sprite animation
^^^^^^^^^^^^^^^^^^^^^^^

For really smooth sprite animation, you need to synchronize the
sprite updates with the vertical refresh.  It's not strictly necessary
to do this - for example, :ref:`sprites256` doesn't, but :ref:`asteroids`
does.

One way is to double-buffer the sprite updates: you write new sprite
values into page 0, while displaying page 1, then display page 1
while updating page 0.  Here's the code from :ref:`asteroids` that
starts the write into page 0 or 1, depending on whether the frame
counter ``r`` is odd or even:

.. literalinclude:: ../files/gameduino/synth/sketches/asteroids.pder
  :language: c++
  :start-after: JCB-SPR_PAGEW-A
  :end-before: JCB-SPR_PAGEW-B

and to do the actual flip: wait for vertical refresh then change the SPR_PAGE register:

.. literalinclude:: ../files/gameduino/synth/sketches/asteroids.pder
  :language: c++
  :start-after: JCB-SPR_PAGE-A
  :end-before: JCB-SPR_PAGE-B

Square and sawtooth waves
^^^^^^^^^^^^^^^^^^^^^^^^^

The hardware audio voices only generate sine waves and noise - so
how do you create the square and sawtooth waves of old video games?
By summing up a few sine waves to get a close approximation to that
original 8-bit sound.

Sawtooth is simpler; this function uses voices 0-3 to make the sound of a sawtooth wave:

.. literalinclude:: ../files/gameduino/synth/sketches/audio.pder
  :language: c++
  :start-after: JCB-SAWTOOTH-A
  :end-before: JCB-SAWTOOTH-B

Sample at 440Hz is here :download:`sawtooth440.wav`

and for square waves the math is only slightly more complicated:

.. literalinclude:: ../files/gameduino/synth/sketches/audio.pder
  :language: c++
  :start-after: JCB-SQUARE-A
  :end-before: JCB-SQUARE-B

Sample is here :download:`square440.wav`

Last modified $Date: 2011-05-13 11:32:42 -0700 (Fri, 13 May 2011) $
